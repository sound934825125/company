
// 1.基本类型

	: any											// 区别于 object 可以调用任何方法
	: object
	: boolean
	: number										// 十进制 十六进制 二进制 八进制
	: string										` 多行文本 ${expr} `

	: type[] = []									// 数组
	: [type,type]									// 元组: 不同元素类型数组

	// null | undefined | never 是任何类型的子类型
	: void											// return = undefined | null
	: never											// never: 永不存在或总是错误的值

// 类型断言 - 类型强制转换

	<type>varable
	varable as type

// =======================================================================================================

// 2.泛型，类型变量 <T>

	function Func<T>(arg: T): T { return arg; }		// 定义
	let varable = Func<string>("myString") 			// 调用

	// 数组泛型：Array<T>
	// 只读数组泛型：ReadonlyArray<T>							

// 泛型约束，限制泛型的范围	

// =======================================================================================================

3.杖举

	常量集合(不能重新赋值)
	编译为对象(键/值)

3.1.数字杖举
	
	未初始化成员值从0开始递增，已初始化成员向下递增
	初始化:表达式(运算符) | 常量 | 其他杖举引用 | 函数调用
	自动生成反向映射表 值/键对

// 3.2.字符串杖举

// 3.3.常量杖举

	const enum enumName {}	
	// 不生成反向映射表
	// 不生成对象只生成常量(即，不可访问对象只可访问成员)

// 3.4.外部杖举：不可访问，只用于描述外部已存在的杖举或常量集合。防止重名
	
	declear enum enumName {}

// =======================================================================================================

// 4.迭代器

	// 遍历调用 list键，到 i
	for (let i in list){ console.log(i) }	
	// 遍历调用 list值，到 i				
	for (let i of list){ console.log(i) }					